snippet r "Require" b
const $1 = require('$1')
endsnippet

snippet R "Require ramda" b
const { $1 } = require('ramda')
endsnippet

snippet RF "Require ramda-fantasy" b
const RF = require('ramda-fantasy')
endsnippet

snippet mon "Use monad" b
const $1 = RF.$1
endsnippet

snippet log "Description"
console.log($1)
endsnippet

snippet fac "Factory" b
module.exports = function (

) {
  $1
}
endsnippet

snippet facfac "Factory factory" b
module.exports = function (
  $1
) {
  function `!v g:Abolish.camelcase(expand('%:t:r'))` ($2) {
    $3
  }

  return `!v g:Abolish.camelcase(expand('%:t:r'))`
}
endsnippet

snippet CRUDProjection "CRUDProjection" b
const inherits = require('util').inherits
module.exports = function (
  CRUDProjectionFactory
) {
  function $1Projection () {
    $1Projection.super_.call(this, '$1')
  }

  inherits($1Projection, CRUDProjectionFactory('$1'))
  return $1Projection
}
endsnippet

snippet des "describe" b
describe('$1', () => {
  $2
})
endsnippet

snippet it "it block" b
it('$1', () => {
  $2
})
endsnippet

snippet sf "Self function" b
self.$1 = function () {

}
endsnippet

snippet time "console.time"
console.time('$1')
console.timeEnd('$1')
endsnippet

snippet	di "Di variable"
const $1 = di.get('$1')
endsnippet

snippet res "Resolve"
statics: {

  resolve: function (state) {
    return [
      $1
    ]
  }

},

endsnippet
	
snippet bef "Before each"
beforeEach(() => {
  $1
})
endsnippet

snippet tim "test import" b
import `!p
from subprocess import Popen, PIPE
source = t[1]
goodPart = source.rpartition('/')[2]
p = Popen(['change-case', '-c', goodPart], stdout=PIPE)
full = p.communicate()[0].strip()
snip.rv = full
` from '.${2}/lib/${1:${VISUAL}}'
endsnippet

snippet	imp "import" b
import { $1 } from '$2'
endsnippet
	
snippet	dimp "default import" b
import $1 from '$2'
endsnippet

snippet rimp "relative import" b
import $1 from './`!p
import re

snip.rv = re.sub(r'(?<!^)(?=[A-Z])', '-', t[1]).lower()
`'
endsnippet

snippet	f "function" w
($1) => $2
endsnippet

snippet	fu "function with body" w
($1) => {
  $2
}
endsnippet

snippet fun "function literal"
function $1 ($2) {
  $3
}
endsnippet
	
snippet ef "export function" b
export default function `!v g:Abolish.camelcase(expand('%:t:r'))` ($1) {
  $2
}
endsnippet

snippet ec "export component" b
export default function `!v g:Abolish.mixedcase(expand('%:t:r'))` ($1) {
  $2
}
endsnippet

snippet ed "export default" b
export default $1
endsnippet
	
snippet rm "React method" b
$1: function ($2) {
  $3
},
endsnippet

snippet command "Command" b
module.exports = function (
  R,
  ${1}Schemas,
  authorizeIdReferences,
  validateCommandInput,
  ${2}Projection
) {
  return {
    name: '$3',
    event: '$4',
    entityName: '$5',
    createStream: $6,
    getId: R.prop('$7'),
    processData: $8,
    projection: $2Projection,
    schemaValidation: {
      $9: $1Schemas.$10
    },
    validators: [
      validateCommandInput,
      authorizeIdReferences
    ],
    rest: {
      route: '$11',
      method: '$12',
      getParams: R.$13,
      responsePrefix: '$14'
    }
  }
}
endsnippet

snippet deletecommand "Delete Command" b
module.exports = function (
  R,
  authorize$1Id,
  $1Projection
) {
  return {
    name: 'Delete$1',
    event: '$1Deleted',
    entityName: '$2',
    createStream: false,
    getId: R.identity,
    processData: R.identity,
    projection: $1Projection,
    validators: [
      authorize$1Id
    ],
    rest: {
      route: '/$3/:$4Id',
      method: 'del',
      getParams: R.prop('$4Id'),
      responseCode: 204
    }
  }
}
endsnippet

snippet getquery "Query" b
module.exports = function (
  R,
  $1Storage,
  authorize$2Id
) {
  return {
    name: 'Get$2',
    dbFunction: $1Storage.findById,
    validators: [
      authorize$2Id
    ],
    rest: {
      route: '/$3/:$1Id',
      getParams: R.prop('$1Id'),
      responsePrefix: '$1'
    }
  }
}
endsnippet

snippet query "Query" b
module.exports = function (
  R,
  $1Storage,
  authorize$2
) {
  return {
    name: 'Get$3',
    dbFunction: $1Storage.$4,
    validators: [
      authorize$2
    ],
    rest: {
      route: '/$5',
      getParams: R.$6,
      responsePrefix: '$7'
    }
  }
}
endsnippet

snippet c "constants" b
const { $1 } = $2
endsnippet

snippet ptry "promise try"
Promise.try(() => {
  $1
})
endsnippet

snippet ertf "export rtf" b
import { rtfOf } from '@theludd/gaius-type-classes'

function $1 () {
  return rtfOf('')
}

export default $1
endsnippet

snippet gtc "import gaius type classes" b
import { $1 } from '@theludd/gaius-type-classes'
endsnippet

snippet gdbs "import gaius db-spec" b
import { $1 } from '@theludd/gaius-db-spec'
endsnippet

snippet grs "import gaius rest server" b
import { $1 } from '@theludd/gaius-rest-server'
endsnippet

snippet gss "import gaius socket server" b
import { $1 } from '@theludd/gaius-socket-server'
endsnippet

snippet bpc "import blueprintjs/core" b
import { $1 } from '@blueprintjs/core'
endsnippet

snippet top "test operation" b
import { assert } from 'chai'
import { assertSyncRtf, createOperationTest } from '@theludd/gaius-test'
import { processOperation } from '@theludd/gaius-event-sourcing'
import proxyquire from 'proxyquire'

const { deepEqual } = assert

createOperationTest('`!p
from subprocess import Popen, PIPE
source = t[1]
goodPart = source.rpartition('/')[2]
p = Popen(['change-case', '-c', goodPart], stdout=PIPE)
full = p.communicate()[0].strip()
snip.rv = full
`', (verifyOperationMock) => {
  const `!p snip.rv = full` = proxyquire('.$2/${1:${VISUAL}}', {
    '@theludd/gaius-event-sourcing': { verifyOperation: verifyOperationMock },
  })
  const env = {}
  it('should $4', () => {
    const input = { $3 }
    const rtf = processOperation(`!p snip.rv = full`, input)
    assertSyncRtf(env, input, rtf)
    deepEqual(verifyOperationMock.verifications, [
      '$5',
    ])
  })
})
endsnippet

snippet $ "inter" i
${$1}$2
endsnippet
	
snippet ff "fantasy functions import" b
import { $1 } from '@theludd/fantasy-functions'
endsnippet

snippet ges "gaius event sourcing" b
import { $1 } from '@theludd/gaius-event-sourcing'
endsnippet

snippet gt "gaius test" b
import { $1 } from '@theludd/gaius-test'
endsnippet

snippet y "yafu import" b
import { $1 } from 'yafu'
endsnippet

snippet cu "yafu curry" b
import { curry } from 'yafu'
endsnippet

snippet con "constructor" b
constructor (props) {
  super(props)
}
endsnippet

snippet cons "constructor with state" b
constructor (props) {
  super(props)
  this.state = {
    $1
  }
}
endsnippet

snippet sp "spread props" b
{ ...{
  $1
} }
endsnippet

snippet gcom "gaius command" b
import { verifyOperation } from '@theludd/gaius-event-sourcing'

export default {
  event: '$1',
  name: '$2',
  processChain: [
    verifyOperation([]),
  ],
  streamType: '$3',
}
endsnippet

snippet gu "gaius users import" b
import { $1 } from '@theludd/gaius-users'
endsnippet
	
snippet gutd "gaius users test doubles import" b
import { $1 } from '@theludd/gaius-users/dist/test-doubles'
endsnippet
	
snippet td "import test doubles" b
import { $1 } from './test-doubles'
endsnippet
	
snippet pf "project function" b
describe('#$1', () => {
  const { $1 } = $2
  it('should $3', () => {
    const event = {
      data: { $4 },
    }
    const result = $1(event)
    const expected = { $5 }
    deepEqual(result, expected)
  })
})
endsnippet

snippet spacet "space operation test" b
import testSpaceOperation from './test-space-operation'

testSpaceOperation({
  input: {
    actor: 'X',
    $4,
    streamId: 'Y',
  },
  name: '$1',
  path: '.$3/lib/$2',
  wantedProps: [ $5 ],
})
endsnippet

snippet spacecom "space command" b
import { verifyOperation } from '@theludd/gaius-event-sourcing'
import { rtfOf } from '@theludd/gaius-type-classes'
import { compose } from 'yafu'
import { pick } from 'ramda'
import verifyActorOwnsStreamSpace from './verify-actor-owns-stream-space'

export default {
  event: '$1',
  name: '$2',
  processChain: [
    verifyOperation([
      verifyActorOwnsStreamSpace,
    ]),
    compose(rtfOf, pick([ '$3' ])),
  ],
  streamType: 'spaces',
}
endsnippet

snippet P "description" b
const Promise = require('bluebird')
endsnippet

snippet tlog "timeout log"
setTimeout((d) => console.dir(d, { depth: 10 }), 100, $1)
endsnippet

snippet sh "state hook" b
const [ $1, $2 ] = useState($3)
endsnippet

snippet devFixture "dev fixture" b
const di = module.exports.getDI('dev')
const initOperationRoles = require('@mediatool/mt-authorization/lib/init-operation-roles')
initOperationRoles(di).then(() => {
  di.loadAll()
})
endsnippet

snippet	u "utils import" b
import { $1 } from '@mediatool/mt-utils/import'
endsnippet

snippet its "test outline" b
it.skip('$1', () => {})
endsnippet

snippet test "Test" b
import `!v g:Abolish.camelcase(expand('%:t:r'))` from '`!v GetTestImportPath()`'

describe('`!v g:Abolish.camelcase(expand('%:t:r'))`', () => {
  it('${1:works}', () => {
    `!v g:Abolish.camelcase(expand('%:t:r'))`()
  })
})
endsnippet

snippet tc "Test component" b
import { shallow } from 'enzyme'
import `!v g:Abolish.mixedcase(expand('%:t:r'))` from '`!v GetTestImportPath()`'

describe('`!v g:Abolish.mixedcase(expand('%:t:r'))`', () => {
  let wrapper
  beforeEach(() => {
    wrapper = shallow(<`!v g:Abolish.mixedcase(expand('%:t:r'))` />)
  })
  it('${1:renders}', () => {
    $2
  })
})
endsnippet

snippet trtf "test rtf" b
import { assertSyncRtf } from '@theludd/gaius-test'
import `!v g:Abolish.camelcase(expand('%:t:r'))` from '`!v expand('%:r:gs?./test?../lib?')`'

describe('`!v g:Abolish.camelcase(expand('%:t:r'))`', () => {
  const env = {}
  it('${1:works}', () => {
    const rtf = `!v g:Abolish.camelcase(expand('%:t:r'))`()
    assertSyncRtf(env, '', rtf)
  })
})
endsnippet

snippet script "description"
require('./load-credentials')
const di = require('./di')
endsnippet
