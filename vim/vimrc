" For a paranoia.
" Normally `:set nocp` is not needed, because it is done automatically
" when .vimrc is found.
if &compatible
  " `:set nocp` has many side effects. Therefore this should be done
  " only when 'compatible' is set.
  set nocompatible
endif

" Basic config
syntax enable
set noswapfile
" Sane completion in command mode
set wildmenu
set wildmode=list:longest
" Detect file types for plugins/omni completion etc
filetype plugin indent on
" Highlight search matches while typing
set incsearch
" Use relative line numbers
set relativenumber
set number

" Leader commands, leader is '
let mapleader = "'"

" Edit vimrc
function! TabIsEmpty()
    return winnr('$') == 1 && len(expand('%')) == 0 && line2byte(line('$') + 1) <= 2
endfunction
function! EditFile(path)
    if TabIsEmpty()
        :execute "e " . a:path
    else
        :execute "tabe " . a:path
    endif
endfunction
nnoremap <leader>ev :call EditFile("$MYVIMRC")<cr>
" Source vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" Plugins
" Use minpac as package manager
packadd minpac
call minpac#init()

" minpac must have {'type': 'opt'} so that it can be loaded with `packadd`.
call minpac#add('k-takata/minpac', {'type': 'opt'})

" Use colorscheme jellybeans
call minpac#add('nanotech/jellybeans.vim')
colorscheme jellybeans

" Surround plugin
call minpac#add('tpope/vim-surround')

" Hardtime
call minpac#add('takac/vim-hardtime')
let g:hardtime_default_on = 1

" Multiple cursors
call minpac#add('terryma/vim-multiple-cursors')

" Javascript plugin
call minpac#add('pangloss/vim-javascript')

" Linter
call minpac#add('w0rp/ale')
let g:ale_fixers = {'javascript': ['eslint']}
let g:ale_linters = {'javascript': ['eslint']}
let g:ale_lint_delay = 500
nnoremap <leader>l : ALEFix<cr>

" Mappings

" Move easily between windows
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Move lines up and down
nnoremap - :normal ddp<CR>
nnoremap _ @='kddpk'<CR>

" Move letters right/left
nnoremap <Right> xp
nnoremap <Left> hxph

" Use same command for upper/lower case
cnoreabbrev W w
cnoreabbrev Wa wa
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev X x
cnoreabbrev Xa xa

" Open/close files
cnoreabbrev tc tabclose
cnoreabbrev t tabedit

function! TabCloseRight(bang)
    let cur=tabpagenr()
    while cur < tabpagenr('$')
        exe 'tabclose' . a:bang . ' ' . (cur + 1)
    endwhile
endfunction

function! TabCloseLeft(bang)
    while tabpagenr() > 1
        exe 'tabclose' . a:bang . ' 1'
    endwhile
endfunction

command! -bang Tcr call TabCloseRight('<bang>')
command! -bang Tcl call TabCloseLeft('<bang>')

" Clear search with space
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Remove trailing whitespace when saving
function! <SID>StripTrailingWhitespaces()
    if exists('b:noStripWhitespace')
        return
    endif

    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre *.snippets let b:noStripWhitespace=1
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
